write.csv(base_asbtrac, "CS_AB_v3K8.csv", quote = F, row.names = T)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=90, clust= 8,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
# guardamos las palabras claver y creamos un theasure
theashure_ab_v2 <- as.data.frame(CS_AB_v3K8$coord$coord)
# obtenemos las palabras y el color asociado (cluster)
color <- CS_AB_v3K8[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["color"]]
palabra <- CS_AB_v3K8[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["label"]]
# CREAMOS UN DATA FRAME
grupos <- cbind(palabra, color)
colnames(grupos)
# eliminamos NA
grupos <- grupos[1:188,]
# juntamos las dos bases de datos y las exportamos
base_asbtrac <- cbind(theashure_ab_v2, grupos)
write.csv(base_asbtrac, "CS_AB_v3K8.csv", quote = F, row.names = T)
CS_AB_v3K6 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=90, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
# guardamos las palabras claver y creamos un theasure
theashure_ab_v2 <- as.data.frame(CS_AB_v3K6$coord$coord)
# obtenemos las palabras y el color asociado (cluster)
color <- CS_AB_v3K6[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["color"]]
palabra <- CS_AB_v3K6[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["label"]]
# CREAMOS UN DATA FRAME
grupos <- cbind(palabra, color)
colnames(grupos)
# eliminamos NA
grupos <- grupos[1:188,]
# juntamos las dos bases de datos y las exportamos
base_asbtrac <- cbind(theashure_ab_v2, grupos)
write.csv(base_asbtrac, "CS_AB_v3K6.csv", quote = F, row.names = T)
CS_AB_v3K6 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=50, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
View(CS_AB_v3K6)
CS_AB_v3K6 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=70, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K6 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=75, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K6 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=60, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K6 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=65, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=65, clust= 8,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
# guardamos las palabras claver y creamos un theasure
theashure_ab_v2 <- as.data.frame(CS_AB_v3K6$coord$coord)
theashure_ab_v3 <- as.data.frame(CS_AB_v3K8$coord$coord)
# obtenemos las palabras y el color asociado (cluster)
color <- CS_AB_v3K6[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["color"]]
palabra <- CS_AB_v3K6[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["label"]]
color1 <- CS_AB_v3K8[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["color"]]
palabra1 <- CS_AB_v3K8[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["label"]]
# CREAMOS UN DATA FRAME
grupos <- cbind(palabra, color)
colnames(grupos)
grupos1 <- cbind(palabra1, color1)
colnames(grupos1)
# eliminamos NA
grupos <- grupos[1:188,]
grupos1 <- grupos1[1:188,]
# juntamos las dos bases de datos y las exportamos
base_asbtrac <- cbind(theashure_ab_v2, grupos)
base_asbtrac1 <- cbind(theashure_ab_v3, grupos1)
# CREAMOS UN DATA FRAME
grupos <- cbind(palabra, color)
colnames(grupos)
grupos1 <- cbind(palabra1, color1)
colnames(grupos1)
View(grupos)
View(grupos1)
# eliminamos NA
grupos <- grupos[1:287,]
grupos1 <- grupos1[1:287,]
# juntamos las dos bases de datos y las exportamos
base_asbtrac <- cbind(theashure_ab_v2, grupos)
base_asbtrac1 <- cbind(theashure_ab_v3, grupos1)
write.csv(base_asbtrac, "CS_AB_v3K6.csv", quote = F, row.names = T)
write.csv(base_asbtrac1, "CS_AB_v3K8.csv", quote = F, row.names = T)
CS_AB_v3K6 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=65, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=65, clust= 10,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=65, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=50, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
View(CS_AB_v3K8)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=55, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=58, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=59, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=60, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=61, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=62, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=63, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=63, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=63, clust= 10,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v4K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=100, clust= 10,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
View(CS_AB_v4K8)
CS_AB_v4K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=80, clust= 10,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v4K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=90, clust= 10,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v4K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=85, clust= 10,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
# obtenemos el valor de los componentes principales
CS_AB_v4K8[["graph_documents_TC"]][["labels"]][["y"]]
CS_AB_v4K8[["graph_documents_TC"]][["labels"]][["x"]]
CS_AB_v4K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=85, clust= 4,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
# obtenemos el valor de los componentes principales
CS_AB_v4K8[["graph_documents_TC"]][["labels"]][["y"]]
CS_AB_v4K8[["graph_documents_TC"]][["labels"]][["x"]]
CS_AB_v4K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=85, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
CS_AB_v2 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=130, clust= 6,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
# obtenemos el valor de los componentes principales
CS_AB_v2[["graph_documents_TC"]][["labels"]][["y"]]
CS_AB_v2[["graph_documents_TC"]][["labels"]][["x"]]
View(CS_AB_v2)
View(CS_AB_v3K8)
View(CS_AB_v4K8)
######## paquetes ########
library(tidyr)
library(dplyr)  # Para manipulaciÃ³n de datos
library(rio)
library(stringdist)
library(stringr)
library(bibliometrix)
library(plyr)
library(ggthemes)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggrepel)
library(ggmap)
library(scatterpie)
library("ggspatial")
library("sf")
library("tmap")
library("rnaturalearth")
library("rnaturalearthdata")
rm(list = ls())
######### dendograma temas sobre resumen ######
# caragamos la base de datos en formato bib
file <- "base_bib_preliminar.bib"
M <- convert2df(file = file, dbsource = "scopus", format = "bibtex")
head(M$TI)
# caragamos la base de datos pre-limpia
bd <- read.csv("base_preeliminar.csv")
bd$Title <- toupper(bd$Title)
head(bd$Title)
# filtramos la base de daos M para tener los mismos documentos que en bd
M2 <- M[M$TI %in% bd$Title,]
CS_AB_v3K8 <- conceptualStructure(M2, field="AB", method="MCA", minDegree=85, clust= 10,
k.max = 10, stemming=FALSE, labelsize=5, documents=30)
# guardamos las palabras claver y creamos un theasure
theashure_ab_v2 <- as.data.frame(CS_AB_v3K8$coord$coord)
theashure_ab_v3 <- as.data.frame(CS_AB_v3K8$coord$coord)
# exportamos en csv
write.csv(theashure_ab_v2, "theashure_ab_v2.csv", quote = F)
# obtenemos las palabras y el color asociado (cluster)
color <- CS_AB_v3K8[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["color"]]
palabra <- CS_AB_v3K8[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["label"]]
color1 <- CS_AB_v3K8[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["color"]]
palabra1 <- CS_AB_v3K8[["graph_documents_TC"]][["plot_env"]][["df_clust"]][["label"]]
# CREAMOS UN DATA FRAME
grupos <- cbind(palabra, color)
colnames(grupos)
grupos1 <- cbind(palabra1, color1)
colnames(grupos1)
View(grupos)
# eliminamos NA
grupos <- grupos[1:206,]
grupos1 <- grupos1[1:206,]
# juntamos las dos bases de datos y las exportamos
base_asbtrac <- cbind(theashure_ab_v2, grupos)
base_asbtrac1 <- cbind(theashure_ab_v3, grupos1)
View(base_asbtrac1)
View(base_asbtrac)
write.csv(base_asbtrac, "CS_AB_v3K10.csv", quote = F, row.names = T)
# cargamos los datos
AB_BASE <- read.csv("CS_AB_v3K10.csv")
View(AB_BASE)
AB_BASE %>% count(color)
AB_BASE$color[AB_BASE$color == "#377EB8"] <- "A"
AB_BASE$color[AB_BASE$color == "#4DAF4A"] <- "B"
AB_BASE$color[AB_BASE$color == "#66C2A5"] <- "C"
AB_BASE$color[AB_BASE$color == "#984EA3"] <- "D"
AB_BASE$color[AB_BASE$color == "#999999"] <- "E"
AB_BASE$color[AB_BASE$color == "#A65628"] <- "F"
AB_BASE$color[AB_BASE$color == "#E41A1C"] <- "G"
AB_BASE$color[AB_BASE$color == "#F781BF"] <- "H"
AB_BASE$color[AB_BASE$color == "#FC8D62"] <- "I"
AB_BASE$color[AB_BASE$color == "#FF7F00"] <- "J"
# obtenemos el valor de los componentes principales
CS_AB_v3K8[["graph_documents_TC"]][["labels"]][["y"]]
CS_AB_v3K8[["graph_documents_TC"]][["labels"]][["x"]]
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(observacion, sort = T) %>%
filter (1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(observacion) %>%
filter (1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(AB_BASE$observacion) %>%
filter (1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(AB_BASE$observacion,  sort = T) %>%
filter (1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(AB_BASE$observacion,  sort = T) %>%
filter(1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(AB_BASE$observacion,  sort = T) %>%
filter (==1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(AB_BASE$observacion,  sort = T) %>%
slice(1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(observacion,  sort = T) %>%
slice(1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE %>%
count(observacion, sort = TRUE) %>%
slice(1)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE[AB_BASE$observacion == NA]
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE <- AB_BASE[AB_BASE$observacion %in% AB_BASE$observacion == NA]
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE %>% count(observacion)
######## paquetes ########
library(tidyr)
library(dplyr)  # Para manipulaciÃ³n de datos
library(rio)
library(stringdist)
library(stringr)
library(bibliometrix)
library(plyr)
library(ggthemes)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggrepel)
library(ggmap)
library(scatterpie)
library("ggspatial")
library("sf")
library("tmap")
library("rnaturalearth")
library("rnaturalearthdata")
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE %>% count(observacion)
# eliminamos aquellas palabras que esten bajo observacion, la desicion de que palabra esta bajo observacion
# parte de que no haya palabras repetidas dentro de clada cluster, que hay palabras poco informativas para un cluster
AB_BASE %>% count(color)
AB_BASE <- AB_BASE %>%
filter(!observacion %in% c(NA))
# cargamos los datos
AB_BASE <- read.csv("CS_AB_v3K10.csv")
# Cambiamos el nombre de los colores por letras para identificar cada grupo
AB_BASE$color[AB_BASE$color == "#377EB8"] <- "A"
AB_BASE$color[AB_BASE$color == "#4DAF4A"] <- "B"
AB_BASE$color[AB_BASE$color == "#66C2A5"] <- "C"
AB_BASE$color[AB_BASE$color == "#984EA3"] <- "D"
AB_BASE$color[AB_BASE$color == "#999999"] <- "E"
AB_BASE$color[AB_BASE$color == "#A65628"] <- "F"
AB_BASE$color[AB_BASE$color == "#E41A1C"] <- "G"
AB_BASE$color[AB_BASE$color == "#F781BF"] <- "H"
AB_BASE$color[AB_BASE$color == "#FC8D62"] <- "I"
AB_BASE$color[AB_BASE$color == "#FF7F00"] <- "J"
AB_BASE <- AB_BASE %>%
filter(observacion %in% c(NA))
# obtenemos el valor de los componentes principales
CS_AB_v3K8[["graph_documents_TC"]][["labels"]][["y"]]
CS_AB_v3K8[["graph_documents_TC"]][["labels"]][["x"]]
chulls <- ddply(AB_BASE, .(color), function(AB_BASE) AB_BASE[chull(AB_BASE$Dim1, AB_BASE$Dim2), ])
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2, shape = factor(color))) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
panel.border = element_rect(linetype = "line", fill = NA)) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
panel.border = element_rect(linetype = "line")) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(arrow = arrow())) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(lineend = round)) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(lineend = round())) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
axis.line = element_line(lineend) +
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(lineend)) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(lineend= "round")) +
geom_text(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
check_overlap = TRUE, vjust = 0, nudge_y = 0.02)
g1
ggsave("estructura_206_K10.pdf", plot = g1, width = 8, height = 6)
ggsave("estructura_206_K10.pdf", plot = g1, width = 10, height = 8)
ggsave("estructura_206_K10.pdf", plot = g1, width = 15, height = 10)
ggsave("estructura_206_K10.pdf", plot = g1, width = 18, height = 15)
library(ggrepel)
g1 <- ggplot(data = AB_BASE, aes(x = Dim1, y = Dim2)) +
geom_point(aes(colour = factor(color)), size = 2) +
labs(x = "Dim 1 (22.65%)", y = "Dim 2 (13.81%)") +
geom_polygon(data = chulls, aes(x = Dim1, y = Dim2, fill = color, group = color), alpha = 0.2) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(lineend = "round")) +
geom_text_repel(data = AB_BASE, aes(x = Dim1, y = Dim2, label = ID, colour = color),
size = 3, max.overlaps = Inf)
g1
ggsave("estructura_206_K10.pdf", plot = g1, width = 15, height = 12)
ggsave("estructura_206_K10.pdf", plot = g1, width = 12, height = 10)
######## paquetes ########
library(tidyr)
library(dplyr)  # Para manipulaciÃ³n de datos
library(rio)
library(stringdist)
library(stringr)
library(bibliometrix)
library(plyr)
library(ggthemes)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggrepel)
library(ggmap)
library(scatterpie)
library("ggspatial")
library("sf")
library("tmap")
library("rnaturalearth")
library("rnaturalearthdata")
######## paquetes ########
library(tidyr)
library(dplyr)  # Para manipulaciÃ³n de datos
library(rio)
library(stringdist)
library(stringr)
library(bibliometrix)
library(plyr)
library(ggthemes)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggrepel)
library(ggmap)
library(scatterpie)
library("ggspatial")
library("sf")
library("tmap")
library("rnaturalearth")
library("rnaturalearthdata")
######## paquetes ########
library(tidyr)
library(dplyr)  # Para manipulaciÃ³n de datos
library(rio)
library(stringdist)
library(stringr)
library(bibliometrix)
library(plyr)
library(ggthemes)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(ggrepel)
